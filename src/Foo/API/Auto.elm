module Foo.API.Auto exposing (..)


{- this file is generated by <https://github.com/choonkeat/elm-auto-encoder-decoder> do not modify manually -}


import Foo.API exposing (..)
import Dict
import Json.Decode
import Json.Decode.Pipeline
import Json.Encode
import Platform
import Set


-- API IMPORTS


import Task exposing (Task)
import Http



-- HARDCODE


encodeString : String -> Json.Encode.Value
encodeString =
    Json.Encode.string


encodeInt : Int -> Json.Encode.Value
encodeInt =
    Json.Encode.int


encodeFloat : Float -> Json.Encode.Value
encodeFloat =
    Json.Encode.float


encodeBool : Bool -> Json.Encode.Value
encodeBool =
    Json.Encode.bool


encodeList : (a -> Json.Encode.Value) -> List a -> Json.Encode.Value
encodeList =
    Json.Encode.list


encodeSetSet : (comparable -> Json.Encode.Value) -> Set.Set comparable -> Json.Encode.Value
encodeSetSet encoder =
    Set.toList >> encodeList encoder


encodeDictDict : (a -> Json.Encode.Value) -> (b -> Json.Encode.Value) -> Dict.Dict a b -> Json.Encode.Value
encodeDictDict keyEncoder =
    Json.Encode.dict (\k -> Json.Encode.encode 0 (keyEncoder k))


encode_Unit : () -> Json.Encode.Value
encode_Unit value =
    Json.Encode.list identity [ encodeString "" ]


--


decodeString : Json.Decode.Decoder String
decodeString =
    Json.Decode.string


decodeInt : Json.Decode.Decoder Int
decodeInt =
    Json.Decode.int


decodeFloat : Json.Decode.Decoder Float
decodeFloat =
    Json.Decode.float


decodeBool : Json.Decode.Decoder Bool
decodeBool =
    Json.Decode.bool


decodeList : (Json.Decode.Decoder a) -> Json.Decode.Decoder (List a)
decodeList =
    Json.Decode.list


decodeSetSet : (Json.Decode.Decoder comparable) -> Json.Decode.Decoder (Set.Set comparable)
decodeSetSet =
    Json.Decode.list >> Json.Decode.map Set.fromList


decodeDictDict : (Json.Decode.Decoder comparable) -> (Json.Decode.Decoder b) -> Json.Decode.Decoder (Dict.Dict comparable b)
decodeDictDict keyDecoder valueDecoder =
    Json.Decode.dict valueDecoder
        |> Json.Decode.map (\dict ->
            Dict.foldl (\string v acc ->
                case Json.Decode.decodeString keyDecoder string of
                    Ok k ->
                        Dict.insert k v acc
                    Err _ ->
                        acc
            ) Dict.empty dict
        )


decode_Unit : Json.Decode.Decoder ()
decode_Unit  =
    Json.Decode.index 0 Json.Decode.string
        |> Json.Decode.andThen
            (\word ->
                case word of
                    "" -> (Json.Decode.succeed ())
                    _ -> Json.Decode.fail ("Unexpected Unit: " ++ word)
            )


httpJsonBodyResolver : Json.Decode.Decoder a -> Http.Response String -> Result Http.Error a
httpJsonBodyResolver decoder resp =
    case resp of
        Http.GoodStatus_ m s ->
            Json.Decode.decodeString decoder s
                |> Result.mapError (Json.Decode.errorToString >> Http.BadBody)

        Http.BadUrl_ s ->
            Err (Http.BadUrl s)

        Http.Timeout_ ->
            Err Http.Timeout

        Http.NetworkError_ ->
            Err Http.NetworkError

        Http.BadStatus_ m s ->
            Json.Decode.decodeString decoder s
                -- just trying; if our decoder understands the response body, great
                |> Result.mapError (\_ -> Http.BadStatus m.statusCode)


-- PRELUDE


{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Nothing") [],CustomTypeConstructor (TitleCaseDotPhrase "Just") [ConstructorTypeParam "a"]], name = TypeName "Maybe" ["a"] } -}
encodeMaybe : (a -> Json.Encode.Value) -> Maybe a -> Json.Encode.Value
encodeMaybe arga value =
    case value of
        (Nothing) -> (Json.Encode.list identity [ encodeString "Nothing" ])
        (Just m0) -> (Json.Encode.list identity [ encodeString "Just", (arga m0) ])



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Err") [ConstructorTypeParam "x"],CustomTypeConstructor (TitleCaseDotPhrase "Ok") [ConstructorTypeParam "a"]], name = TypeName "Result" ["x","a"] } -}
encodeResult : (x -> Json.Encode.Value) -> (a -> Json.Encode.Value) -> Result x a -> Json.Encode.Value
encodeResult argx arga value =
    case value of
        (Err m0) -> (Json.Encode.list identity [ encodeString "Err", (argx m0) ])
        (Ok m0) -> (Json.Encode.list identity [ encodeString "Ok", (arga m0) ])

{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Nothing") [],CustomTypeConstructor (TitleCaseDotPhrase "Just") [ConstructorTypeParam "a"]], name = TypeName "Maybe" ["a"] } -}
decodeMaybe : (Json.Decode.Decoder (a)) -> Json.Decode.Decoder (Maybe a)
decodeMaybe arga =
    Json.Decode.index 0 Json.Decode.string
        |> Json.Decode.andThen
            (\word ->
                case word of
                    "Nothing" -> (Json.Decode.succeed Nothing)
                    "Just" -> (Json.Decode.succeed Just |> (Json.Decode.Pipeline.custom (Json.Decode.index 1 (arga))))
                    _ -> Json.Decode.fail ("Unexpected Maybe: " ++ word)
            )
                 



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Err") [ConstructorTypeParam "x"],CustomTypeConstructor (TitleCaseDotPhrase "Ok") [ConstructorTypeParam "a"]], name = TypeName "Result" ["x","a"] } -}
decodeResult : (Json.Decode.Decoder (x)) -> (Json.Decode.Decoder (a)) -> Json.Decode.Decoder (Result x a)
decodeResult argx arga =
    Json.Decode.index 0 Json.Decode.string
        |> Json.Decode.andThen
            (\word ->
                case word of
                    "Err" -> (Json.Decode.succeed Err |> (Json.Decode.Pipeline.custom (Json.Decode.index 1 (argx))))
                    "Ok" -> (Json.Decode.succeed Ok |> (Json.Decode.Pipeline.custom (Json.Decode.index 1 (arga))))
                    _ -> Json.Decode.fail ("Unexpected Result: " ++ word)
            )
                 





{- functions cannot be encoded/decoded into json
{-| TypeAliasDef (AliasRecordType (TypeName "Foo.API.API" ["x","a","b"]) [CustomField (FieldName "listThings") (Function (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ListThingInput") []) (CustomTypeConstructor (TitleCaseDotPhrase "List") [ConstructorTypeParam "a"])),CustomField (FieldName "thing") (Function (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ShowThingInput") []) (CustomTypeConstructor (TitleCaseDotPhrase "Maybe") [ConstructorTypeParam "b"])),CustomField (FieldName "createThing") (Function (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.CreateThingInput") []) (CustomTypeConstructor (TitleCaseDotPhrase "Result") [ConstructorTypeParam "x",CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.Thing") []])),CustomField (FieldName "updateThing") (Function (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.UpdateThingInput") []) (CustomTypeConstructor (TitleCaseDotPhrase "Result") [ConstructorTypeParam "x",CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.Thing") []])),CustomField (FieldName "deleteThing") (Function (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.DeleteThingInput") []) (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.Acknowledgement") [ConstructorTypeParam "x"]))]) -}
encodeFooAPIAPI : (x -> Json.Encode.Value) -> (a -> Json.Encode.Value) -> (b -> Json.Encode.Value) -> Foo.API.API x a b -> Json.Encode.Value
encodeFooAPIAPI argx arga argb value =
    Json.Encode.object
        [ ("listThings", (<function>) value.listThings)
        , ("thing", (<function>) value.thing)
        , ("createThing", (<function>) value.createThing)
        , ("updateThing", (<function>) value.updateThing)
        , ("deleteThing", (<function>) value.deleteThing)
        ]
-}



{-| TypeAliasDef (AliasCustomType (TypeName "Foo.API.Acknowledgement" ["x"]) (CustomTypeConstructor (TitleCaseDotPhrase "Result") [ConstructorTypeParam "x",CustomTypeConstructor (TitleCaseDotPhrase "()") []])) -}
encodeFooAPIAcknowledgement : (x -> Json.Encode.Value) -> Foo.API.Acknowledgement x -> Json.Encode.Value
encodeFooAPIAcknowledgement argx value =
    (encodeResult (argx) (encode_Unit)) value



{-| TypeAliasDef (AliasRecordType (TypeName "Foo.API.CreateThingInput" []) [CustomField (FieldName "name") (CustomTypeConstructor (TitleCaseDotPhrase "String") [])]) -}
encodeFooAPICreateThingInput : Foo.API.CreateThingInput -> Json.Encode.Value
encodeFooAPICreateThingInput value =
    Json.Encode.object
        [ ("name", (encodeString) value.name)
        ]



{-| TypeAliasDef (AliasRecordType (TypeName "Foo.API.DeleteThingInput" []) [CustomField (FieldName "id") (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ID") [])]) -}
encodeFooAPIDeleteThingInput : Foo.API.DeleteThingInput -> Json.Encode.Value
encodeFooAPIDeleteThingInput value =
    Json.Encode.object
        [ ("id", (encodeFooAPIID) value.id)
        ]



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ID") [CustomTypeConstructor (TitleCaseDotPhrase "String") []]], name = TypeName "Foo.API.ID" [] } -}
encodeFooAPIID : Foo.API.ID -> Json.Encode.Value
encodeFooAPIID value =
    case value of
        (Foo.API.ID m0) -> (Json.Encode.list identity [ encodeString "Foo.API.ID", (encodeString m0) ])



{-| TypeAliasDef (AliasRecordType (TypeName "Foo.API.ListThingInput" []) [CustomField (FieldName "since") (CustomTypeConstructor (TitleCaseDotPhrase "Maybe") [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ID") []]),CustomField (FieldName "pageSize") (CustomTypeConstructor (TitleCaseDotPhrase "Maybe") [CustomTypeConstructor (TitleCaseDotPhrase "Int") []])]) -}
encodeFooAPIListThingInput : Foo.API.ListThingInput -> Json.Encode.Value
encodeFooAPIListThingInput value =
    Json.Encode.object
        [ ("since", (encodeMaybe (encodeFooAPIID)) value.since)
        , ("pageSize", (encodeMaybe (encodeInt)) value.pageSize)
        ]



{-| TypeAliasDef (AliasCustomType (TypeName "Foo.API.Response" ["x"]) (CustomTypeConstructor (TitleCaseDotPhrase "Result") [ConstructorTypeParam "x",CustomTypeConstructor (TitleCaseDotPhrase "String") []])) -}
encodeFooAPIResponse : (x -> Json.Encode.Value) -> Foo.API.Response x -> Json.Encode.Value
encodeFooAPIResponse argx value =
    (encodeResult (argx) (encodeString)) value



{-| TypeAliasDef (AliasRecordType (TypeName "Foo.API.ShowThingInput" []) [CustomField (FieldName "id") (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ID") [])]) -}
encodeFooAPIShowThingInput : Foo.API.ShowThingInput -> Json.Encode.Value
encodeFooAPIShowThingInput value =
    Json.Encode.object
        [ ("id", (encodeFooAPIID) value.id)
        ]



{-| TypeAliasDef (AliasRecordType (TypeName "Foo.API.Thing" []) [CustomField (FieldName "id") (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ID") []),CustomField (FieldName "name") (CustomTypeConstructor (TitleCaseDotPhrase "String") [])]) -}
encodeFooAPIThing : Foo.API.Thing -> Json.Encode.Value
encodeFooAPIThing value =
    Json.Encode.object
        [ ("id", (encodeFooAPIID) value.id)
        , ("name", (encodeString) value.name)
        ]



{-| TypeAliasDef (AliasRecordType (TypeName "Foo.API.UpdateThingInput" []) [CustomField (FieldName "id") (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ID") []),CustomField (FieldName "name") (CustomTypeConstructor (TitleCaseDotPhrase "String") [])]) -}
encodeFooAPIUpdateThingInput : Foo.API.UpdateThingInput -> Json.Encode.Value
encodeFooAPIUpdateThingInput value =
    Json.Encode.object
        [ ("id", (encodeFooAPIID) value.id)
        , ("name", (encodeString) value.name)
        ]


{- functions cannot be encoded/decoded into json
{-| TypeAliasDef (AliasRecordType (TypeName "Foo.API.API" ["x","a","b"]) [CustomField (FieldName "listThings") (Function (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ListThingInput") []) (CustomTypeConstructor (TitleCaseDotPhrase "List") [ConstructorTypeParam "a"])),CustomField (FieldName "thing") (Function (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ShowThingInput") []) (CustomTypeConstructor (TitleCaseDotPhrase "Maybe") [ConstructorTypeParam "b"])),CustomField (FieldName "createThing") (Function (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.CreateThingInput") []) (CustomTypeConstructor (TitleCaseDotPhrase "Result") [ConstructorTypeParam "x",CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.Thing") []])),CustomField (FieldName "updateThing") (Function (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.UpdateThingInput") []) (CustomTypeConstructor (TitleCaseDotPhrase "Result") [ConstructorTypeParam "x",CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.Thing") []])),CustomField (FieldName "deleteThing") (Function (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.DeleteThingInput") []) (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.Acknowledgement") [ConstructorTypeParam "x"]))]) -}
decodeFooAPIAPI : (Json.Decode.Decoder (x)) -> (Json.Decode.Decoder (a)) -> (Json.Decode.Decoder (b)) -> Json.Decode.Decoder (Foo.API.API x a b)
decodeFooAPIAPI argx arga argb =
    Json.Decode.succeed Foo.API.API
        |> Json.Decode.Pipeline.custom (Json.Decode.at [ "listThings" ] (<function>))
        |> Json.Decode.Pipeline.custom (Json.Decode.at [ "thing" ] (<function>))
        |> Json.Decode.Pipeline.custom (Json.Decode.at [ "createThing" ] (<function>))
        |> Json.Decode.Pipeline.custom (Json.Decode.at [ "updateThing" ] (<function>))
        |> Json.Decode.Pipeline.custom (Json.Decode.at [ "deleteThing" ] (<function>))
-}



{-| TypeAliasDef (AliasCustomType (TypeName "Foo.API.Acknowledgement" ["x"]) (CustomTypeConstructor (TitleCaseDotPhrase "Result") [ConstructorTypeParam "x",CustomTypeConstructor (TitleCaseDotPhrase "()") []])) -}
decodeFooAPIAcknowledgement : (Json.Decode.Decoder (x)) -> Json.Decode.Decoder (Foo.API.Acknowledgement x)
decodeFooAPIAcknowledgement argx =
    (decodeResult (argx) (decode_Unit))



{-| TypeAliasDef (AliasRecordType (TypeName "Foo.API.CreateThingInput" []) [CustomField (FieldName "name") (CustomTypeConstructor (TitleCaseDotPhrase "String") [])]) -}
decodeFooAPICreateThingInput : Json.Decode.Decoder (Foo.API.CreateThingInput)
decodeFooAPICreateThingInput  =
    Json.Decode.succeed Foo.API.CreateThingInput
        |> Json.Decode.Pipeline.custom (Json.Decode.at [ "name" ] (decodeString))



{-| TypeAliasDef (AliasRecordType (TypeName "Foo.API.DeleteThingInput" []) [CustomField (FieldName "id") (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ID") [])]) -}
decodeFooAPIDeleteThingInput : Json.Decode.Decoder (Foo.API.DeleteThingInput)
decodeFooAPIDeleteThingInput  =
    Json.Decode.succeed Foo.API.DeleteThingInput
        |> Json.Decode.Pipeline.custom (Json.Decode.at [ "id" ] (decodeFooAPIID))



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ID") [CustomTypeConstructor (TitleCaseDotPhrase "String") []]], name = TypeName "Foo.API.ID" [] } -}
decodeFooAPIID : Json.Decode.Decoder (Foo.API.ID)
decodeFooAPIID  =
    Json.Decode.index 0 Json.Decode.string
        |> Json.Decode.andThen
            (\word ->
                case word of
                    "Foo.API.ID" -> (Json.Decode.succeed Foo.API.ID |> (Json.Decode.Pipeline.custom (Json.Decode.index 1 (decodeString))))
                    _ -> Json.Decode.fail ("Unexpected Foo.API.ID: " ++ word)
            )
                 



{-| TypeAliasDef (AliasRecordType (TypeName "Foo.API.ListThingInput" []) [CustomField (FieldName "since") (CustomTypeConstructor (TitleCaseDotPhrase "Maybe") [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ID") []]),CustomField (FieldName "pageSize") (CustomTypeConstructor (TitleCaseDotPhrase "Maybe") [CustomTypeConstructor (TitleCaseDotPhrase "Int") []])]) -}
decodeFooAPIListThingInput : Json.Decode.Decoder (Foo.API.ListThingInput)
decodeFooAPIListThingInput  =
    Json.Decode.succeed Foo.API.ListThingInput
        |> Json.Decode.Pipeline.custom (Json.Decode.at [ "since" ] (decodeMaybe (decodeFooAPIID)))
        |> Json.Decode.Pipeline.custom (Json.Decode.at [ "pageSize" ] (decodeMaybe (decodeInt)))



{-| TypeAliasDef (AliasCustomType (TypeName "Foo.API.Response" ["x"]) (CustomTypeConstructor (TitleCaseDotPhrase "Result") [ConstructorTypeParam "x",CustomTypeConstructor (TitleCaseDotPhrase "String") []])) -}
decodeFooAPIResponse : (Json.Decode.Decoder (x)) -> Json.Decode.Decoder (Foo.API.Response x)
decodeFooAPIResponse argx =
    (decodeResult (argx) (decodeString))



{-| TypeAliasDef (AliasRecordType (TypeName "Foo.API.ShowThingInput" []) [CustomField (FieldName "id") (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ID") [])]) -}
decodeFooAPIShowThingInput : Json.Decode.Decoder (Foo.API.ShowThingInput)
decodeFooAPIShowThingInput  =
    Json.Decode.succeed Foo.API.ShowThingInput
        |> Json.Decode.Pipeline.custom (Json.Decode.at [ "id" ] (decodeFooAPIID))



{-| TypeAliasDef (AliasRecordType (TypeName "Foo.API.Thing" []) [CustomField (FieldName "id") (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ID") []),CustomField (FieldName "name") (CustomTypeConstructor (TitleCaseDotPhrase "String") [])]) -}
decodeFooAPIThing : Json.Decode.Decoder (Foo.API.Thing)
decodeFooAPIThing  =
    Json.Decode.succeed Foo.API.Thing
        |> Json.Decode.Pipeline.custom (Json.Decode.at [ "id" ] (decodeFooAPIID))
        |> Json.Decode.Pipeline.custom (Json.Decode.at [ "name" ] (decodeString))



{-| TypeAliasDef (AliasRecordType (TypeName "Foo.API.UpdateThingInput" []) [CustomField (FieldName "id") (CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ID") []),CustomField (FieldName "name") (CustomTypeConstructor (TitleCaseDotPhrase "String") [])]) -}
decodeFooAPIUpdateThingInput : Json.Decode.Decoder (Foo.API.UpdateThingInput)
decodeFooAPIUpdateThingInput  =
    Json.Decode.succeed Foo.API.UpdateThingInput
        |> Json.Decode.Pipeline.custom (Json.Decode.at [ "id" ] (decodeFooAPIID))
        |> Json.Decode.Pipeline.custom (Json.Decode.at [ "name" ] (decodeString))


type ServerMsg x a b
    = OnDeleteThing (Foo.API.Acknowledgement x)
    | OnUpdateThing (Result x (Foo.API.Thing))
    | OnCreateThing (Result x (Foo.API.Thing))
    | OnThing (Maybe b)
    | OnListThings (List a)


type ClientMsg
    = DoDeleteThing (Foo.API.DeleteThingInput)
    | DoUpdateThing (Foo.API.UpdateThingInput)
    | DoCreateThing (Foo.API.CreateThingInput)
    | DoThing (Foo.API.ShowThingInput)
    | DoListThings (Foo.API.ListThingInput)


{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "DoDeleteThing") [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.DeleteThingInput") []],CustomTypeConstructor (TitleCaseDotPhrase "DoUpdateThing") [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.UpdateThingInput") []],CustomTypeConstructor (TitleCaseDotPhrase "DoCreateThing") [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.CreateThingInput") []],CustomTypeConstructor (TitleCaseDotPhrase "DoThing") [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ShowThingInput") []],CustomTypeConstructor (TitleCaseDotPhrase "DoListThings") [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ListThingInput") []]], name = TypeName "ClientMsg" [] } -}
encodeClientMsg : ClientMsg -> Json.Encode.Value
encodeClientMsg value =
    case value of
        (DoDeleteThing m0) -> (Json.Encode.list identity [ encodeString "DoDeleteThing", (encodeFooAPIDeleteThingInput m0) ])
        (DoUpdateThing m0) -> (Json.Encode.list identity [ encodeString "DoUpdateThing", (encodeFooAPIUpdateThingInput m0) ])
        (DoCreateThing m0) -> (Json.Encode.list identity [ encodeString "DoCreateThing", (encodeFooAPICreateThingInput m0) ])
        (DoThing m0) -> (Json.Encode.list identity [ encodeString "DoThing", (encodeFooAPIShowThingInput m0) ])
        (DoListThings m0) -> (Json.Encode.list identity [ encodeString "DoListThings", (encodeFooAPIListThingInput m0) ])



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "OnDeleteThing") [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.Acknowledgement") [ConstructorTypeParam "x"]],CustomTypeConstructor (TitleCaseDotPhrase "OnUpdateThing") [CustomTypeConstructor (TitleCaseDotPhrase "Result") [ConstructorTypeParam "x",CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.Thing") []]],CustomTypeConstructor (TitleCaseDotPhrase "OnCreateThing") [CustomTypeConstructor (TitleCaseDotPhrase "Result") [ConstructorTypeParam "x",CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.Thing") []]],CustomTypeConstructor (TitleCaseDotPhrase "OnThing") [CustomTypeConstructor (TitleCaseDotPhrase "Maybe") [ConstructorTypeParam "b"]],CustomTypeConstructor (TitleCaseDotPhrase "OnListThings") [CustomTypeConstructor (TitleCaseDotPhrase "List") [ConstructorTypeParam "a"]]], name = TypeName "ServerMsg" ["x","a","b"] } -}
encodeServerMsg : (x -> Json.Encode.Value) -> (a -> Json.Encode.Value) -> (b -> Json.Encode.Value) -> ServerMsg x a b -> Json.Encode.Value
encodeServerMsg argx arga argb value =
    case value of
        (OnDeleteThing m0) -> (Json.Encode.list identity [ encodeString "OnDeleteThing", (encodeFooAPIAcknowledgement (argx) m0) ])
        (OnUpdateThing m0) -> (Json.Encode.list identity [ encodeString "OnUpdateThing", (encodeResult (argx) (encodeFooAPIThing) m0) ])
        (OnCreateThing m0) -> (Json.Encode.list identity [ encodeString "OnCreateThing", (encodeResult (argx) (encodeFooAPIThing) m0) ])
        (OnThing m0) -> (Json.Encode.list identity [ encodeString "OnThing", (encodeMaybe (argb) m0) ])
        (OnListThings m0) -> (Json.Encode.list identity [ encodeString "OnListThings", (encodeList (arga) m0) ])

{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "DoDeleteThing") [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.DeleteThingInput") []],CustomTypeConstructor (TitleCaseDotPhrase "DoUpdateThing") [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.UpdateThingInput") []],CustomTypeConstructor (TitleCaseDotPhrase "DoCreateThing") [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.CreateThingInput") []],CustomTypeConstructor (TitleCaseDotPhrase "DoThing") [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ShowThingInput") []],CustomTypeConstructor (TitleCaseDotPhrase "DoListThings") [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.ListThingInput") []]], name = TypeName "ClientMsg" [] } -}
decodeClientMsg : Json.Decode.Decoder (ClientMsg)
decodeClientMsg  =
    Json.Decode.index 0 Json.Decode.string
        |> Json.Decode.andThen
            (\word ->
                case word of
                    "DoDeleteThing" -> (Json.Decode.succeed DoDeleteThing |> (Json.Decode.Pipeline.custom (Json.Decode.index 1 (decodeFooAPIDeleteThingInput))))
                    "DoUpdateThing" -> (Json.Decode.succeed DoUpdateThing |> (Json.Decode.Pipeline.custom (Json.Decode.index 1 (decodeFooAPIUpdateThingInput))))
                    "DoCreateThing" -> (Json.Decode.succeed DoCreateThing |> (Json.Decode.Pipeline.custom (Json.Decode.index 1 (decodeFooAPICreateThingInput))))
                    "DoThing" -> (Json.Decode.succeed DoThing |> (Json.Decode.Pipeline.custom (Json.Decode.index 1 (decodeFooAPIShowThingInput))))
                    "DoListThings" -> (Json.Decode.succeed DoListThings |> (Json.Decode.Pipeline.custom (Json.Decode.index 1 (decodeFooAPIListThingInput))))
                    _ -> Json.Decode.fail ("Unexpected ClientMsg: " ++ word)
            )
                 



{-| CustomTypeDef { constructors = [CustomTypeConstructor (TitleCaseDotPhrase "OnDeleteThing") [CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.Acknowledgement") [ConstructorTypeParam "x"]],CustomTypeConstructor (TitleCaseDotPhrase "OnUpdateThing") [CustomTypeConstructor (TitleCaseDotPhrase "Result") [ConstructorTypeParam "x",CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.Thing") []]],CustomTypeConstructor (TitleCaseDotPhrase "OnCreateThing") [CustomTypeConstructor (TitleCaseDotPhrase "Result") [ConstructorTypeParam "x",CustomTypeConstructor (TitleCaseDotPhrase "Foo.API.Thing") []]],CustomTypeConstructor (TitleCaseDotPhrase "OnThing") [CustomTypeConstructor (TitleCaseDotPhrase "Maybe") [ConstructorTypeParam "b"]],CustomTypeConstructor (TitleCaseDotPhrase "OnListThings") [CustomTypeConstructor (TitleCaseDotPhrase "List") [ConstructorTypeParam "a"]]], name = TypeName "ServerMsg" ["x","a","b"] } -}
decodeServerMsg : (Json.Decode.Decoder (x)) -> (Json.Decode.Decoder (a)) -> (Json.Decode.Decoder (b)) -> Json.Decode.Decoder (ServerMsg x a b)
decodeServerMsg argx arga argb =
    Json.Decode.index 0 Json.Decode.string
        |> Json.Decode.andThen
            (\word ->
                case word of
                    "OnDeleteThing" -> (Json.Decode.succeed OnDeleteThing |> (Json.Decode.Pipeline.custom (Json.Decode.index 1 (decodeFooAPIAcknowledgement (argx)))))
                    "OnUpdateThing" -> (Json.Decode.succeed OnUpdateThing |> (Json.Decode.Pipeline.custom (Json.Decode.index 1 (decodeResult (argx) (decodeFooAPIThing)))))
                    "OnCreateThing" -> (Json.Decode.succeed OnCreateThing |> (Json.Decode.Pipeline.custom (Json.Decode.index 1 (decodeResult (argx) (decodeFooAPIThing)))))
                    "OnThing" -> (Json.Decode.succeed OnThing |> (Json.Decode.Pipeline.custom (Json.Decode.index 1 (decodeMaybe (argb)))))
                    "OnListThings" -> (Json.Decode.succeed OnListThings |> (Json.Decode.Pipeline.custom (Json.Decode.index 1 (decodeList (arga)))))
                    _ -> Json.Decode.fail ("Unexpected ServerMsg: " ++ word)
            )
                 


type alias HttpClientAPI x a b =
    { listThings : (Foo.API.ListThingInput) -> (Task (Http.Error) (List a))
    , thing : (Foo.API.ShowThingInput) -> (Task (Http.Error) (Maybe b))
    , createThing : (Foo.API.CreateThingInput) -> (Task (Http.Error) (Result x (Foo.API.Thing)))
    , updateThing : (Foo.API.UpdateThingInput) -> (Task (Http.Error) (Result x (Foo.API.Thing)))
    , deleteThing : (Foo.API.DeleteThingInput) -> (Task (Http.Error) (Foo.API.Acknowledgement x))
    }


httpClient : (Json.Decode.Decoder x) -> (Json.Decode.Decoder a) -> (Json.Decode.Decoder b) -> HttpClientAPI x a b
httpClient argx arga argb =
    { listThings = \input ->
        Http.task
            { method = "POST"
            , headers = []
            , url = "/foo/api/listThings"
            , body = Http.jsonBody ((encodeFooAPIListThingInput) input)
            , resolver = Http.stringResolver (httpJsonBodyResolver (decodeList (arga)))
            , timeout = Just 60000
            }
    , thing = \input ->
        Http.task
            { method = "POST"
            , headers = []
            , url = "/foo/api/thing"
            , body = Http.jsonBody ((encodeFooAPIShowThingInput) input)
            , resolver = Http.stringResolver (httpJsonBodyResolver (decodeMaybe (argb)))
            , timeout = Just 60000
            }
    , createThing = \input ->
        Http.task
            { method = "POST"
            , headers = []
            , url = "/foo/api/createThing"
            , body = Http.jsonBody ((encodeFooAPICreateThingInput) input)
            , resolver = Http.stringResolver (httpJsonBodyResolver (decodeResult (argx) (decodeFooAPIThing)))
            , timeout = Just 60000
            }
    , updateThing = \input ->
        Http.task
            { method = "POST"
            , headers = []
            , url = "/foo/api/updateThing"
            , body = Http.jsonBody ((encodeFooAPIUpdateThingInput) input)
            , resolver = Http.stringResolver (httpJsonBodyResolver (decodeResult (argx) (decodeFooAPIThing)))
            , timeout = Just 60000
            }
    , deleteThing = \input ->
        Http.task
            { method = "POST"
            , headers = []
            , url = "/foo/api/deleteThing"
            , body = Http.jsonBody ((encodeFooAPIDeleteThingInput) input)
            , resolver = Http.stringResolver (httpJsonBodyResolver (decodeFooAPIAcknowledgement (argx)))
            , timeout = Just 60000
            }
    }


type alias HttpServerAPI headerContext serverState x a b =
    { listThings : headerContext -> serverState -> (Foo.API.ListThingInput) -> (serverState, (Task (Never) (List a)))
    , thing : headerContext -> serverState -> (Foo.API.ShowThingInput) -> (serverState, (Task (Never) (Maybe b)))
    , createThing : headerContext -> serverState -> (Foo.API.CreateThingInput) -> (serverState, (Task x (Foo.API.Thing)))
    , updateThing : headerContext -> serverState -> (Foo.API.UpdateThingInput) -> (serverState, (Task x (Foo.API.Thing)))
    , deleteThing : headerContext -> serverState -> (Foo.API.DeleteThingInput) -> (serverState, (Task (Never) (Foo.API.Acknowledgement x)))
    }


routeHttpServerAPI : (Json.Decode.Decoder headerContext) -> (Json.Decode.Decoder serverState) -> (Json.Decode.Decoder x) -> (Json.Decode.Decoder a) -> (Json.Decode.Decoder b) -> HttpServerAPI headerContext serverState x a b -> Json.Decode.Value -> String -> String -> serverState -> Maybe (serverState, Cmd (ServerMsg x a b))
routeHttpServerAPI argheaderContext argserverState argx arga argb router headerValue requestBody requestPath serverState =
    case (Json.Decode.decodeValue argheaderContext headerValue, requestPath) of
    (Ok ctx, "/foo/api/listThings") ->
        case Json.Decode.decodeString (decodeFooAPIListThingInput) requestBody of
            Err err ->
                Nothing

            Ok input ->
                let
                    (newServerState, task) =
                        router.listThings ctx serverState input
                in
                Just (newServerState, Task.perform OnListThings task)

    (Ok ctx, "/foo/api/thing") ->
        case Json.Decode.decodeString (decodeFooAPIShowThingInput) requestBody of
            Err err ->
                Nothing

            Ok input ->
                let
                    (newServerState, task) =
                        router.thing ctx serverState input
                in
                Just (newServerState, Task.perform OnThing task)

    (Ok ctx, "/foo/api/createThing") ->
        case Json.Decode.decodeString (decodeFooAPICreateThingInput) requestBody of
            Err err ->
                Nothing

            Ok input ->
                let
                    (newServerState, task) =
                        router.createThing ctx serverState input
                in
                Just (newServerState, Task.attempt OnCreateThing task)

    (Ok ctx, "/foo/api/updateThing") ->
        case Json.Decode.decodeString (decodeFooAPIUpdateThingInput) requestBody of
            Err err ->
                Nothing

            Ok input ->
                let
                    (newServerState, task) =
                        router.updateThing ctx serverState input
                in
                Just (newServerState, Task.attempt OnUpdateThing task)

    (Ok ctx, "/foo/api/deleteThing") ->
        case Json.Decode.decodeString (decodeFooAPIDeleteThingInput) requestBody of
            Err err ->
                Nothing

            Ok input ->
                let
                    (newServerState, task) =
                        router.deleteThing ctx serverState input
                in
                Just (newServerState, Task.perform OnDeleteThing task)

    _ -> Nothing